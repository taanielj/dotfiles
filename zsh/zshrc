if [[ -r "$XDG_CONFIG_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "$XDG_CONFIG_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### The following lines were added by compinstall
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' glob 1
zstyle ':completion:*' substitute 1
zstyle :compinstall filename '~/.zshrc'

autoload -Uz compinit
compinit

export PATH="$PATH:/snap/bin"
### End of lines added by compinstall

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
zinit light Aloxaf/fzf-tab
zinit light romkatv/powerlevel10k


# Oh My Zsh configuration

## Theme configuration

## Plugin configuration
plugins=(
  git
)



## Autocomplete configuration
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

## Update configuration
zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' frequency 13

## Source the Oh My Zsh script
source $ZSH/oh-my-zsh.sh

# Environment configuration

## Enable true color support - needed for tmux and nvim
export COLORTERM=truecolor

# Key bindings configuration

## ctrl up and down do nothing
bindkey -s "^[[1;5A" ""
bindkey -s "^[[1;5B" ""

## ctrl left and right: move to left or right word (these don't work on mac)
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

## option left and right: move to left or right word (these work on mac)
## ctrl backspace: delete word before cursor, ctrl delete: delete word after cursor
bindkey "^H" backward-kill-word # ctrl backspace
bindkey "^[[3;5~" kill-word # ctrl delete

# Aliases configuration
alias vim=nvim
# on mac, the command is bat, on linux, it's batcat
# alias cat="batcat -p --paging=never"
# check if bat command exists, if not use batcat, if not use cat
if command -v bat &> /dev/null; then
  alias cat="bat -p --paging=never"
elif command -v batcat &> /dev/null; then
  alias cat="batcat -p --paging=never"
else
  alias cat="cat"
fi
#on mac the command is fd, on linux, it's fdfind
#alias fd="fdfind"
if command -v fd &> /dev/null; then
  alias fd="fd"
elif command -v fdfind &> /dev/null; then
  alias fd="fdfind"
else
    alias fd="find"
fi

# exa is nolonger maintained, using eza instead, a maintained fork
if command -v eza &> /dev/null; then
  alias l="eza"

  # Function to wrap eza while correctly handling -l and -a flags
  _eza_wrapper() {
    local args=("$@")
    
    # If invoked as 'la', force -l -a
    if [[ "${FUNCNAME[1]}" == "la" ]]; then
      set -- -l -a "${args[@]}"
    fi

    eza --group-directories-first --icons --color=always --git -h "$@"
  }

  # Use aliases to redirect to the wrapper function
  alias ls="_eza_wrapper"
  alias la="_eza_wrapper -l -a"
  alias tree="eza --tree"
else
  alias l="ls"
  alias ls="ls --color=auto"
  alias la="ls -la --color=auto"
  alias tree="tree"
fi


# Custom functions

# Initialize zoxide
if command -v zoxide &> /dev/null; then
  eval "$(zoxide init --cmd cd zsh)"
fi
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
# eval "$(oh-my-posh init zsh --config ~/.oh-my-posh.omp.json)"

setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
export FZF_DEFAULT_COMMAND='fd --hidden'

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#alias nvimf="fd --type f --hidden | fzf --preview 'bat --color=always --style=header,grid --line-range :500 {}' | xargs nvim"
nvimf() {
    if [[ "$1" != "" && -d -$1 ]];
    then
        nvim $(fd . $1 | fzf --preview 'bat --color=always --style=header,grid --line-range :500 {}')]
    else
        nvim $(fd --type f --hidden | fzf --preview 'bat --color=always --style=header,grid --line-range :500 {}')
    fi
}

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# set alias for python=python3.11
# alias python=python3.11

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/taaniel.jakobson/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/taaniel.jakobson/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/taaniel.jakobson/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/taaniel.jakobson/google-cloud-sdk/completion.zsh.inc'; fi

source ~/.zshrc.python

nvim() {
    [[ $# -ne 0 ]] && command nvim "$@" && return
    
    local venv_path=$(__resolve_venv_path)
    [[ -z $venv_path || ! -f "$venv_path/bin/activate" ]] && command nvim && return

    source "$venv_path/bin/activate"
    command nvim
}

# docker compose aliases
alias dc="docker compose"
alias dcu="docker compose up -d"
alias dcd="docker compose down"
alias dcdv="docker compose down -v"
alias dcr="docker compose run --rm"
alias dcrs="docker compose down && docker compose up -d"

reset_repo() {
    echo -e "\033[1;33mWARNING: This will DELETE and RECLONE the repo!\033[0m"

    # Get root of the repo (ensures we operate from the correct directory)
    REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
    if [[ -z "$REPO_ROOT" ]]; then
        echo -e "\033[1;31mError: Not in a git repository. Please navigate to a git repo and try again.\033[0m"
        return 1
    fi
    cd "$REPO_ROOT" || return 1  # Move to repo root
    # Get the repo name from git remote
    GIT_REMOTE=$(git remote get-url origin 2>/dev/null)
    if [[ -z "$GIT_REMOTE" ]]; then
        echo -e "\033[1;31mError: No remote repository found. Are you in a git repo?\033[0m"
        return 1
    fi

    echo -e "Root Repo Path: \033[1;34m$REPO_ROOT\033[0m"
    echo -e "Git Remote: \033[1;34m$GIT_REMOTE\033[0m"
    echo -e "New Clone Path: \033[1;34m$REPO_ROOT/\033[0m"

    # ðŸš¨ Prevent execution if there are uncommitted changes
    if [[ -n "$(git status --porcelain)" ]]; then
        echo -e "\033[1;31mError: You have uncommitted changes. Commit or discard them before proceeding.\033[0m"
        git status --short
        return 1
    fi

    # ðŸš¨ Prevent execution if there are stashed changes
    if [[ -n "$(git stash list)" ]]; then
        echo -e "\033[1;31mError: You have stashed changes. Apply or drop them before proceeding.\033[0m"
        git stash list
        return 1
    fi

    # Confirm action (zsh-compatible)
    echo -n "Type YES to confirm: "
    read CONFIRM
    if [[ "$CONFIRM" != "YES" ]]; then
        echo -e "\033[1;31mOperation cancelled.\033[0m"
        return 1
    fi

    echo -e "\033[1;33mDeleting and recloning into: $REPO_ROOT\033[0m" 

    # Delete old repo and reclone
    cd $REPO_ROOT && cd .. || return 1
    rm -rf "$REPO_ROOT" || return 1
    git clone "$GIT_REMOTE" "$REPO_ROOT" || return 1
    cd "$REPO_ROOT" || return 1

    echo -e "\033[1;32mRepository reset complete.\033[0m"
}

# tmux() {
#     # If arguments are provided, run tmux normally
#     [[ $# -ne 0 ]] && command tmux "$@" && return
#
#     # If already inside tmux, create a new window and switch to it
#     [[ -n "$TMUX" ]] && command tmux new-window && return
#
#     # If session 0 exists and is detached, attach to it
#     if tmux has-session -t 0 2>/dev/null; then
#         if [[ $(tmux list-sessions -F '#{session_name} #{session_attached}' | awk '$1 == "0" {print $2}') -eq 0 ]]; then
#             command tmux attach-session -t 0
#             return
#         fi
#     fi
#
#     # Otherwise, start a new tmux session
#     command /usr/local/bin/tmux
# }


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
eval "$(direnv hook zsh)"
